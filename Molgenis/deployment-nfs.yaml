#
#  postgres
#
# postgres pod (migrate to a NFS Volume)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres-image
        image: postgres:11-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "xxusernamexx"
        - name: POSTGRES_PASSWORD
          value: "xxpasswordxx"
        - name: POSTGRES_DB
          value: "xxdbxx"
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-data
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc

          #     command: # modified
          #      - /bin/bash
          #      - -c
          #      args:
          #      - sleep 3600

          #      command: [ "/usr/local/bin/docker-entrypoint.sh", "-c 'shared_buffers=256MB'", "-c 'max_locks_per_transaction=1024'" ]
          # command: [ "/usr/local/bin/docker-entrypoint.sh" ]
          #args: [ "-c 'shared_buffers=256MB' -c 'max_locks_per_transaction=1024'" ]
---
# service
kind: Service
apiVersion: v1
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
#
#  elastic search
#
# elastic search pod (migrate to a NFS Volume)
# memlocks limit not included.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: es-image
        image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
        ports:
        - containerPort: 9200
        env:
        - name: cluster.name
          value: "molgenis"
        - name: bootstrap.memory_lock
          value: "true"
        - name: ES_JAVA_OPTS
          value: "-Xms1024m -Xmx1024m"
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: es-data
      volumes:
      - name: es-data
        persistentVolumeClaim:
          claimName: es-data-pvc

---
# service
kind: Service
apiVersion: v1
metadata:
  name: es
spec:
  selector:
    app: elasticsearch
  ports:
  - protocol: TCP
    port: 9200
    targetPort: 9200
---
#
# Kibana
#
#  Not included:
#  profiles:
#      - audit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibanad-image
        image: docker.elastic.co/kibana/kibana:7.15.2
        ports:
        - containerPort: 5601
        env:
        - name: DASHBOARD_FILE
          value: "https://raw.githubusercontent.com/molgenis/molgenis/master/.kibana/dashboard.json"

---
# service
kind: Service
apiVersion: v1
metadata:
  name: kibana
spec:
  selector:
    app: kibana
  ports:
  - protocol: TCP
    port: 5601
    targetPort: 5601
---
#
# Kibana dashboard
#
#
#  securityContext:
#     runAsUser: 0
#      volumeMounts:
#        - mountPath: /root/dashboard
#          name: kbd-data
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-dashboard
  labels:
    app: kibana-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana-dashboard
  template:
    metadata:
      labels:
        app: kibana-dashboard
    spec:
      restartPolicy: Always
      volumes:
        - name: kbd-data
          persistentVolumeClaim:
            claimName: kibanad-data-pvc
      containers:
        - name: kibanad-image
          image: docker.elastic.co/kibana/kibana:7.15.2
          env:
            - name: DASHBOARD_FILE
              value: "https://raw.githubusercontent.com/molgenis/molgenis/master/.kibana/dashboard.json"

---
#
# OpenCPU
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opencpu
  labels:
    app: opencpu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opencpu
  template:
    metadata:
      labels:
        app: opencpu
    spec:
      containers:
      - name: opencpu-image
        image: molgenis/opencpu:opencpu-release-2019-03-20_12-07-11
        ports:
        - containerPort: 8004

---
# service
kind: Service
apiVersion: v1
metadata:
  name: opencpu
spec:
  selector:
    app: opencpu
  ports:
  - protocol: TCP
    port: 8004
    targetPort: 8004
---
#
# MINIO
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio-image
        image: bitnami/minio:2019.4.23
        volumeMounts:
        - mountPath: /data
          name: minio-data
        env:
        - name: MINIO_ACCESS_KEY
          value: "xxminiokeyxx"
        - name: MINIO_SECRET_KEY
          value: "xxminiosecretxx"
        command:
        - /bin/bash
        - -c
        args:
        - minio server /data
      volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data-pvc

---
# service
kind: Service
apiVersion: v1
metadata:
  name: minio
spec:
  selector:
    app: minio
  ports:
  - protocol: TCP
    port: 9000
    targetPort: 9000
---

########### MOLGENIS ######
#
#  molgenis server
#
# Volume app-data (migrate to a NFS Volume)
#
# molgenis pod (migrate to a NFS Volume)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: molgenis
  labels:
    app: molgenis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: molgenis
  template:
    metadata:
      labels:
        app: molgenis
    spec:
      restartPolicy: Always
      securityContext:
         runAsUser: 0
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: app-data-pvc
        - name: audit-log
          persistentVolumeClaim:
            claimName: audit-log-pvc
        - name: server-conf
          configMap:
            name: tomcat-serverxml
            items:
            - key: server.xml
              path: server.xml
        - name: web-conf
          configMap:
            name: tomcat-webxml
            items:
            - key: web.xml
              path: web.xml
      containers:
        - name: molgenis-app
          image: molgenis/molgenis-app:10.1.0
          ports:
            - containerPort: 8080
              name: molgenis-port
          volumeMounts:
            - mountPath: /home/molgenis/data
              name: app-data
            - mountPath: /home/molgenis/audit
              name: audit-log
            - mountPath: /usr/local/tomcat/webapps.dist/docs/WEB-INF/web.xml
              subPath: web.xml
              name: web-conf
            - mountPath: /usr/local/tomcat/conf/server.xml
              subPath: server.xml
              name: server-conf
          env:
            - name: environment
              value: "production"
            - name: molgenis.home
              value: "/home/molgenis"
            - name: mail.username
              value: "xx@xxxxmail.com"
            - name: mail.password
              value: "xxxxxxxxxx"
            - name: opencpu.uri.host
              value: "opencpu"
            - name: elasticsearch.hosts
              value: "es:9200"
            - name: db_uri
              value: "jdbc:postgresql://postgres:5432/molgenis"
            - name: db_user
              value: "xxxxxxx"
            - name: db_password
              value: "xxxxxxx"
            - name: admin.password
              value: "axxxxxx"
            - name: MINIO_BUCKET_NAME
              value: "xxxxxxx"
            - name: MINIO_ENDPOINT
              value: "http://minio:9000"
            - name: MINIO_ACCESS_KEY
              value: "xxxxxxx"
            - name: MINIO_SECRET_KEY
              value: "xxxxxxx"
            - name: MOLGENIS_MAX_FILE_MB
              value: "150"
            - name: audit.log.path
              value: "/home/molgenis/audit/audit.log"
#        value: "jdbc:postgresql://postgres/molgenis"
#      - name: CATALINA_OPTS
#        value: "Xmx1g"
#      - name: createDirs # supposedly for tomcat configuration, not working
#        value: "false"
---

# service
kind: Service
apiVersion: v1
metadata:
  name: molgenis
spec:
  selector:
    app: molgenis
  type: NodePort
  ports:
  - protocol: TCP
    nodePort: 8080
    port: 8080
    name: molgenis-np
    targetPort: 8080

---
#
#  Front-end
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
     app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: molgenis-frontend
        image: molgenis/molgenis-frontend:10.1.0
        ports:
        - containerPort: 80
        # command:
        # - /bin/bash
        # - -c
        # args:
        # - sleep 3600
        # /usr/share/nginx/html
        volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: frontend-data
        - mountPath: /etc/nginx/proxy.d/backend.conf
          subPath: backend.conf
          name: backend-conf
        - mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          name: nginx-conf
        - mountPath: /etc/nginx/proxy.d/lts.conf
          subPath: lts.conf
          name: lts-conf
      volumes:
      - name: frontend-data
        persistentVolumeClaim:
          claimName: frontend-data-pvc
      - name: backend-conf
        configMap:
          name: backend
          items:
          - key: backend.conf
            path: backend.conf
      - name: nginx-conf
        configMap:
          name: nginxconf
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: lts-conf
        configMap:
          name: ltsconf
          items:
          - key: lts.conf
            path: lts.conf
---
# service
kind: Service
apiVersion: v1
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  type: NodePort
  ports:
  - protocol: TCP
    nodePort: 22896
    port: 80
    name: frontend-port
    targetPort: 80
  - protocol: TCP
    nodePort: 30010
    port: 8000
    name: frontend
    targetPort: 80

---
#cancerimage.eu
#pgc-profe.info
########### INGRESS ######
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cancerimage-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    #nginx.ingress.kubernetes.io/configuration-snippet: |
    #  rewrite /molgenis http://catalogue.ramses.i3m.upv.es/ permanent;
    #  rewrite /catalog http://catalogue.ramses.i3m.upv.es/ permanent;
    #nginx.ingress.kubernetes.io/rewrite-target: /$2
    #nginx.ingress.kubernetes.io/use-regex: 'true'
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  #- hosts:
  #  - catalogue.ramses.i3m.upv.es
  #  secretName: catalogue.ramses.i3m.upv.es
  - hosts:
    - catalogue.eucaim.cancerimage.eu
    secretName: catalogue.eucaim.cancerimage.eu

  rules:
    - host: catalogue.eucaim.cancerimage.eu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80